1_ Recorrer un array de forma recursiva.


Caso base:  si  (i=50) entonces == esc ("Fin del arreglo");
caso recursivo: si (i<50) entonces == arreglo:= arreglo (a[i+1]); 


------------------------------------------------------------------------------
Cual de las dos opciones es la mejor?
OPCION 1
|procedimiento arreglo (a: arreglo de [1..50] de entero,i:entero) es
|  
fin procedimiento

OPCION 2
|procedimiento arreglo (a: arreglo de [1..50] de entero) es
|  ambiente
|  i:entero;
--------------------------------------------------------------------------------

|procedimiento arreglo (a: arreglo de [1..50] de entero) es
|  ambiente
|  i:entero;
|
|algoritmos
|  |si (i=50) entonces
|  |  Esc("Fin del Arreglo");
|  |  sino 
|  |   |si (i<51) entonces
|  |   | esc("El arreglo se encuentra en la posición: ", i, "Dentro del arreglo:", a[i]);
|  |   | arreglo := arreglo(a[i+1]);
|  |   |fin si
|  |fin si
|
|Fin Procedimiento





--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
2_ Buscar un elemento de un array de forma recursiva.


base (i = 50) y (a[i] <>x) o (a[i] =x) 

recursivo (i<50) y (a[i] <>x) o (a[i] =x) 
            
            abb:


Izq.. Menor que raiz y menor que el derecho

            Si recorro en orden un arbol binario, lo que sucede es que

            la busqueda va a ser ordenada y empieza la busqueda desde la raiz,.


            Si es menor tengo que ir a la izq, sino tengo que ir a la derecha

            IZQ < raiz < Dercho
            



Avl (Arboles):

				Tiene que estar Equilibrado

				Entre los lvl de los arboles, realiza una operacion para saber si era izq o der

				




            
|Función arreglo(a:arreglo de [1..50] de entero,i:entero ):entero es
| 
| 
| procedimiento
|  
|  |si (i = 50) entonces                    
|  |   |si (a[i]=x) entoconces 
|  |   | esc ("Elemento encontrado");
|  |   | arreglo := a[i];
|  |   |sino 
|  |   |  arreglo:=0;
|  |   |fin si
|  |  
|  |    sino 
|  |    |Si (i<50) entonces
|  |    |  |si (a[i]<>x) entonces
|  |    |  |  arreglo:= arreglo (a[i+1]);
|  |    |  |  sino 
|  |    |  |  esc ("Elemento encontrado");
|  |    |  |  arreglo := a[i];
|  |    |  |fin si
|  |    |fin si
|  |fin si 
|fin función   
            
             
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

3_ Invertir un numero de forma recursiva 




// 123456789

|Función Invertir (num:entero):entero ES
| 
| |si (num<10) ent
| | invertir:=0;
| | sino 
| |   invertir:= (((num mod 10)*10 ) + invertir (num div 10) );
| |   esc ("Numero invertido", invetir); // 987654321
| |
| |fin si
|fin función



--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------


4_ Suma los dígitos de un numero de forma recursiva.
//Suma de forma inversa 3+2+1

caso base: si num<10 ent-- Suma:=0;
caso recursivo: si (num>10) entonces-- Suma:=(num mod 10) + suma(num div 10);


|función Suma (num:entero):entero
| 
| proceso
|  |si ( num < 10 ) entonces
|  | ¿Suma:=num; o Suma:=0;?
|  |                  |^-este
|  | sino 
|  |  Suma:=((num mod 10) + Suma (num div 10));
|  |fin si
|  esc("La suma es: ",Suma);  
|    
|fin Función    
 
 
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

5_ Haz una función que obtenga el máximo número de un array

 una funcion que encuentre el numero mayor en un array.
 
 caso base:  si (i=50) ent-- max:=0;
  caso recursivo: Si (i<50) y si (a[i] < a[i+1]) o si (a[i] > a[i+1])-- Max:= Max (a[i+1]);
 
 |función Max (a:arreglo de [1..50] de entero,i:entero):entero 
 |may:entero;
 |proceso   
 |   
 |   |Si (i=50) entonces
 |   | Max:= 0; //Porque en los ciclos anteriores ya fue analizado La Ultima celda.
 |   |  sino
 |   |   |si (i<50) entonces
 |   |   |  |si (a[i] < a[i+1]) entonces
 |   |   |  | may:= a[i+1];
 |   |   |  | Max:= Max (a[i+1]);
 |   |   |  |  sino 
 |   |   |  |   may:=a[i];
 |   |   |  |   max:= Max (a[i+1]);
 |   |   |  |fin si
 |   |   | fin si  
 |   |fin si
 |   Esc ("El numero mayor en el arreglo es: ",may);
 |   
 |fin Función   
    
    


--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------




10

//aqui min y max tiene los numeros max y min
función listaSINmaxYminOP1 (prim,p:puntero a nodo; min,max:entero ): prim;

si (p=nil) entonces
 
 
 

  sino



fin si

fin función//Elimina los nodos nada mas






//min y max se inicializan fuera
función listaCONmaxYmin (prim,p:puntero a nodo;max,min:entero ): prim;
  
  
  
si(p = nil) y (max <> 0 ) )entonces
   listaCONmaxYmin:= prim;
   p:=prim;
   listaCONmaxYmin:= listaSinMaxYminOP1 (prim,p,min,max); 
   
   
   
    sino
    
    
     si (p <> nil) entonces
       si (*p.dato>max) entonces
           max:=*p.dato;
	    sino
		  si (*p.dato<min) entonces
		     min:= *p.dato;
		  fin si
		     
		fin si    
	    listaCONmaxYmin:= listaCONmaxymin (prim,*p.prox,min,max);
	  fin si
	  
fin si  	     
  
  


fin función

  











